/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers
#define LAYER_DEFAULT 0
#define LAYER_LOWER 1
#define LAYER_SYMBOLS 2
#define LAYER_GAMING 3
#define LAYER_MAGIC 4

/ {
    behaviors {
        //////////////////////////////////////////////////////////////////////////
        // Glove80 firmware
        //////////////////////////////////////////////////////////////////////////

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        //////////////////////////////////////////////////////////////////////////
        // ZMK global overrides
        //////////////////////////////////////////////////////////////////////////

        behavior_caps_word {
            continue-list = <
                UNDERSCORE MINUS
                BACKSPACE DELETE
                N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
            >;
        };

        //////////////////////////////////////////////////////////////////////////
        // Custom
        //////////////////////////////////////////////////////////////////////////

        // Timeless homerow mods
        // https://github.com/urob/zmk-config?tab=readme-ov-file#timeless-homerow-mods
        #define KEYS_LEFT_AND_THUMB <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 56 57 58 59 60 61 62 63 74 75 76 77 78 79 55 72 73 69 70 71 54 53 52>
        #define KEYS_RIGHT_AND_THUMB <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 74 73 72>

        #define LEFT_HAND_KEYS      \
              0  1  2  3  4         \
             10 11 12 13 14 15      \
             22 23 24 25 26 27      \
             34 35 36 37 38 39      \
             46 47 48 49 50 51      \
             64 65 66 67 68
        #define RIGHT_HAND_KEYS     \
                                               5  6  7  8  9 \
                                           16 17 18 19 20 21 \
                                           28 29 30 31 32 33 \
                                           40 41 42 43 44 45 \
                                           58 59 60 61 62 63 \
                                              75 76 77 78 79
        #define THUMB_KEYS          \
                            69 52       57 74                \
                             70 53     56 73                 \
                              71 54   55 72

        #define DEFINE_HOMEROW_MOD(_name_, _label_, _hold_, _tap_, _keys_) \
            _name_: _name_ {                                   \
                compatible = "zmk,behavior-hold-tap";          \
                label = _label_;                               \
                bindings = _hold_, _tap_;                      \
                #binding-cells = <2>;                          \
                tapping-term-ms = <270>;                       \
                require-prior-idle-ms = <80>;                  \
                flavor = "tap-preferred";                      \
                hold-trigger-key-positions = _keys_;           \
                hold-trigger-on-release;                       \
                quick-tap-ms = <150>;                          \
            }

        DEFINE_HOMEROW_MOD(hml, "HML", <&kp>, <&kp>, <LEFT_HAND_KEYS THUMB_KEYS>);
        DEFINE_HOMEROW_MOD(hmr, "HMR", <&kp>, <&kp>, <RIGHT_HAND_KEYS THUMB_KEYS>);

        thumb: thumb_layer_access {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <300>; // enable repeat
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
    };

    macros {
        //////////////////////////////////////////////////////////////////////////
        // Glove80 firmware
        //////////////////////////////////////////////////////////////////////////

        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    //////////////////////////////////////////////////////////////////////////////
    // Layers
    //////////////////////////////////////////////////////////////////////////////

    keymap {
        compatible = "zmk,keymap";

        layer_default {
            bindings = <
            &kp F1               &kp F2       &kp F3       &kp F4        &kp F5                                                                                                                                                             &kp F6         &kp F7        &kp F8       &kp F9          &kp F10
            &kp EQUAL            &kp N1       &kp N2       &kp N3        &kp N4         &kp N5                                                                                                                                      &kp N6  &kp N7         &kp N8        &kp N9       &kp N0          &kp MINUS
            &kp TAB              &kp Q        &kp W        &kp E         &kp R          &kp T                                                                                                                                       &kp Y   &kp U          &kp I         &kp O        &kp P           &kp BSLH
            &kp ESC              &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHIFT F  &kp G                                                                                                                                       &kp H   &hmr LSHIFT J  &hmr LCTRL K  &hmr LALT L  &hmr LGUI SEMI  &kp SQT
            &kp GRAVE            &kp Z        &kp X        &kp C         &kp V          &kp B   &thumb LAYER_SYMBOLS TAB  &thumb LAYER_LOWER LCTRL  &to LAYER_GAMING  &kp LGUI  &thumb LAYER_LOWER RCTRL  &thumb LAYER_SYMBOLS ESC  &kp N   &kp M          &kp COMMA     &kp DOT      &kp FSLH        &kp PG_UP
            &magic LAYER_MAGIC 0 &kp HOME     &kp END      &kp LEFT      &kp RIGHT              &kp BSPC                  &kp DEL                   &kp LALT          &kp RALT  &kp RET                   &kp SPACE                         &kp UP         &kp DOWN      &kp LBKT     &kp RBKT        &kp PG_DN
            >;
        };

        layer_lower {
            bindings = <
            &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                              &kp C_MUTE         &kp C_VOL_DN      &kp C_VOL_UP     &none              &kp PAUSE_BREAK
            &trans        &none         &none       &none       &none      &none                                                                           &kp LPAR   &kp KP_NUM         &kp KP_EQUAL      &kp KP_DIVIDE    &kp KP_MULTIPLY    &kp PSCRN
            &trans        &none         &kp HOME    &kp UP      &kp END    &none                                                                           &kp RPAR   &kp KP_N7          &kp KP_N8         &kp KP_N9        &kp KP_MINUS       &kp SLCK
            &trans        &kp CAPS      &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                                       &kp PRCNT  &hmr RSHIFT KP_N4  &hmr RCTRL KP_N5  &hmr RALT KP_N6  &hmr RGUI KP_PLUS  &none
            &trans        &caps_word    &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to LAYER_DEFAULT  &trans      &trans      &trans    &kp COMMA  &kp KP_N1          &kp KP_N2         &kp KP_N3        &kp KP_ENTER       &trans
            &trans        &none         &kp INS     &kp F11     &kp F12               &trans  &trans  &trans             &trans      &trans      &trans               &kp KP_N0          &kp KP_N0         &kp KP_DOT       &kp KP_ENTER       &trans
            >;
        };

        layer_symbols {
            bindings = <
            &trans  &trans           &trans          &trans           &trans                                                                                   &trans            &trans           &trans          &trans          &trans
            &trans  &trans           &trans          &trans           &trans           &trans                                                       &trans     &trans            &trans           &trans          &trans          &trans
            &trans  &kp AT           &kp RA(S)       &kp RA(O)        &kp DQT          &kp PRCNT                                                    &kp RA(A)  &kp RA(U)         &kp LBKT         &kp RBKT        &kp DLLR        &trans
            &trans  &hml LALT EQUAL  &hml LGUI LPAR  &hml LCTRL RPAR  &hml LSHFT SEMI  &kp QMARK                                                    &kp EXCL   &hmr LSHFT COLON  &hmr LCTRL LBRC  &hmr LGUI RBRC  &hmr LALT HASH  &trans
            &trans  &kp PIPE         &kp AMPS        &trans           &kp GRAVE        &kp BSLH   &trans  &trans  &trans    &trans  &trans  &trans  &kp STAR   &kp LT            &kp GT           &kp PLUS        &kp CARET       &trans
            &trans  &trans           &trans          &kp RA(E)        &kp TILDE                   &trans  &trans  &trans    &trans  &trans  &trans             &trans            &trans           &trans          &trans          &trans
            >;
        };

        // TODO: proper WASD block (look at sunaku)
        layer_gaming {
            bindings = <
            &kp N       &kp Z      &kp H   &kp B   &kp J                                                                            &trans     &trans    &trans    &trans     &trans
            &kp N8      &kp N5     &kp N2  &kp N3  &kp N1  &kp N4                                                                   &trans     &trans    &trans    &trans     &trans    &trans
            &kp V       &kp ESC    &kp C   &kp X   &kp Q   &kp G                                                                    &kp DOT    &kp U     &kp I     &kp O      &kp SEMI  &kp BSPC
            &kp LCTRL   &kp LSHFT  &kp A   &kp W   &kp D   &kp F                                                                    &kp COMMA  &kp LEFT  &kp UP    &kp RIGHT  &kp P     &kp ENTER
            &kp LSHIFT  &kp TAB    &kp R   &kp S   &kp E   &kp T   &trans     &to LAYER_DEFAULT  &kp DOT    &trans  &trans  &trans  &kp FSLH   &kp J     &kp DOWN  &kp K      &kp L     &trans
            &kp GRAVE   &kp N7     &kp N6  &kp M   &kp E           &kp SPACE  &kp LALT           &kp COMMA  &trans  &trans  &kp L              &trans    &trans    &trans     &trans    &trans
            >;
        };

        layer_magic {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &none
            >;
        };
    };
};
