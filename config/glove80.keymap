/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers
#define L_DEFAULT 0
#define L_LOWER 1
#define L_SYMBOLS 2
#define L_WORLD 3
#define L_GAMING 4
#define L_MAGIC 5

// Troubleshooting/timings: https://github.com/urob/zmk-config?tab=readme-ov-file#troubleshooting

// How long you have to hold a key for it to count as a "hold" instead of just a "tap"
#define DEFAULT_HOLDING_TIME 200

// Homerow mod hold time
#define HRM_HOLDTIME 280

// It prevents unintended activation of home row mods when you're actively typing.
#define HOMEROW_STREAK_DECAY 270 // before I used 150

// Time you have left after tapping a key to hold it again to make it auto-repeat.
#define REPEAT_DECAY 175

// Apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer
#define MO_TOG(layer) &mo_tog layer layer

// Unicode sequence
#define UNICODE_TAP_DELAY 15
#define UNICODE(_name_, _keystrokes_)                                 \
    _name_: _name_ {                                                  \
        compatible = "zmk,behavior-macro";                            \
        wait-ms = <UNICODE_TAP_DELAY>;                                \
        tap-ms = <UNICODE_TAP_DELAY>;                                 \
        #binding-cells = <0>;                                         \
        bindings = <&macro_tap &kp LC(LS(U)) _keystrokes_ &kp ENTER>; \
    };

/ {
    //////////////////////////////////////////////////////////////////////////////
    // Behaviors
    //////////////////////////////////////////////////////////////////////////////

    behaviors {
        //////////////////////////////////////////////////////////////////////////
        // Magic layer
        //////////////////////////////////////////////////////////////////////////

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <DEFAULT_HOLDING_TIME>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        //////////////////////////////////////////////////////////////////////////
        // ZMK global overrides
        //////////////////////////////////////////////////////////////////////////

        behavior_caps_word {
            continue-list = <
                UNDERSCORE MINUS
                BACKSPACE DELETE
                N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
            >;
        };

        //////////////////////////////////////////////////////////////////////////
        // Homerow mods
        //////////////////////////////////////////////////////////////////////////

        // Timeless homerow mods
        // https://github.com/urob/zmk-config?tab=readme-ov-file#timeless-homerow-mods
        // https://docs.google.com/spreadsheets/d/1ESgObQelyz4lnKlfwLYsmofLJulOMK5RdGBsopLe2o8/edit
        #define LEFT_HAND_KEYS                                      \
              0  1  2  3  4                                         \
             10 11 12 13 14 15                                      \
             22 23 24 25 26 27                                      \
             34 35 36 37 38 39                                      \
             46 47 48 49 50 51                                      \
             64 65 66 67 68
        #define RIGHT_HAND_KEYS                                     \
                                               5  6  7  8  9        \
                                           16 17 18 19 20 21        \
                                           28 29 30 31 32 33        \
                                           40 41 42 43 44 45        \
                                           58 59 60 61 62 63        \
                                              75 76 77 78 79
        #define THUMB_KEYS                                          \
                            69 52       57 74                       \
                             70 53     56 73                        \
                              71 54   55 72

        #define HOMEROW_MOD(_name_, _htkeys_)                       \
            _name_: _name_ {                                        \
                compatible = "zmk,behavior-hold-tap";               \
                flavor = "balanced";                                \
                tapping-term-ms = <HRM_HOLDTIME>;                   \
                /* repeat on tap-into-hold */                       \
                quick-tap-ms = <REPEAT_DECAY>;                      \
                require-prior-idle-ms = <HOMEROW_STREAK_DECAY>;     \
                #binding-cells = <2>;                               \
                bindings = <&kp>, <&kp>;                            \
                hold-trigger-key-positions = <_htkeys_ THUMB_KEYS>; \
                /* delay positional check until key-release */      \
                hold-trigger-on-release;                            \
            };

        HOMEROW_MOD(hml, RIGHT_HAND_KEYS)
        HOMEROW_MOD(hmr, LEFT_HAND_KEYS)

        //////////////////////////////////////////////////////////////////////////
        // Thumb keys
        //////////////////////////////////////////////////////////////////////////

        // tap: press key, hold: momentary layer
        mo_kp: behav_mo_kp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <DEFAULT_HOLDING_TIME>;
            bindings = <&mo>, <&kp>;
        };

        // tap: toggle layer, hold: momentary layer
        mo_tog: behav_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <DEFAULT_HOLDING_TIME>;
            bindings = <&mo>, <&tog>;
        };

        // ALT / double tap: gaming layer
        alt_gaming: tap_dance_lalt_gaming {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <DEFAULT_HOLDING_TIME>;
            bindings = <&mt LALT LALT>, <&to L_GAMING>;
        };
    };

    //////////////////////////////////////////////////////////////////////////////
    // Macros
    //////////////////////////////////////////////////////////////////////////////

    macros {
        UNICODE(degree_sign, &kp B &kp N0)

        //////////////////////////////////////////////////////////////////////////
        // Firmware stuff
        //////////////////////////////////////////////////////////////////////////

        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    //////////////////////////////////////////////////////////////////////////////
    // Layers
    //////////////////////////////////////////////////////////////////////////////

    keymap {
        compatible = "zmk,keymap";

        layer_default {
            bindings = <
            &kp F1            &kp F2       &kp F3       &kp F4        &kp F5                                                                                                                                           &kp F6         &kp F7        &kp F8       &kp F9          &kp F10
            &kp EQUAL         &kp N1       &kp N2       &kp N3        &kp N4         &kp N5                                                                                                                  &kp N6    &kp N7         &kp N8        &kp N9       &kp N0          &kp MINUS
            &kp TAB           &kp Q        &kp W        &kp E         &kp R          &kp T                                                                                                                   &kp Y     &kp U          &kp I         &kp O        &kp P           &kp BSLH
            &kp ESC           &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHIFT F  &kp G                                                                                                                   &kp H     &hmr LSHIFT J  &hmr LCTRL K  &hmr LALT L  &hmr LGUI SEMI  &kp SQT
            &kp GRAVE         &kp Z        &kp X        &kp C         &kp V          &kp B   &mo_kp L_SYMBOLS TAB  MO_TOG(L_LOWER)  MO_TOG(L_WORLD)  MO_TOG(L_WORLD)  MO_TOG(L_LOWER)  &mo_kp L_SYMBOLS ESC  &kp N     &kp M          &kp COMMA     &kp DOT      &kp FSLH        &kp PG_UP
            &magic L_MAGIC 0  &kp HOME     &kp END      &kp LEFT      &kp RIGHT              &kp BSPC              &kp DEL          &kp LCTRL        &alt_gaming      &kp RET          &kp SPACE                       &kp UP         &kp DOWN      &kp LBKT     &kp RBKT        &kp PG_DN
            >;
        };

        layer_lower {
            bindings = <
            &kp F11           &kp F12  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                                    &none              &none             &none            &none              &none
            &none             &trans   &trans      &trans      &trans     &trans                                                                                &kp LPAR   &kp KP_NUM         &kp KP_EQUAL      &kp KP_DIVIDE    &kp KP_MULTIPLY    &kp PAUSE_BREAK
            &trans            &none    &kp HOME    &kp UP      &kp PG_UP  &kp INS                                                                               &kp RPAR   &kp KP_N7          &kp KP_N8         &kp KP_N9        &kp KP_MINUS       &kp PSCRN
            &trans            &none    &kp LEFT    &kp DOWN    &kp RIGHT  &kp CAPS                                                                              &kp PRCNT  &hmr RSHIFT KP_N4  &hmr RCTRL KP_N5  &hmr RALT KP_N6  &hmr RGUI KP_PLUS  &kp SLCK
            &none             &none    &kp END     &none       &kp PG_DN  &caps_word  &trans      &trans        &to L_DEFAULT  &none      &kp LC(Y)  &kp LC(Z)  &kp COMMA  &kp KP_N1          &kp KP_N2         &kp KP_N3        &kp KP_ENTER       &trans
            &magic L_MAGIC 0  &none    &none       &none       &none                  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &kp LC(X)  &kp LC(C)  &kp LC(V)             &kp KP_N0          &kp KP_N0         &kp KP_DOT       &kp KP_ENTER       &trans
            >;
        };

        layer_symbols {
            bindings = <
            &none             &none         &none      &none      &none                                                                                            &none      &none     &none     &none      &none
            &none             &none         &none      &none      &none      &none                                                                      &none      &none      &none     &none     &none      &none
            &none             &degree_sign  &kp LT     &kp CARET  &kp GT     &kp HASH                                                                   &kp AMPS   &kp UNDER  &kp LBKT  &kp RBKT  &kp PRCNT  &none
            &none             &kp EXCL      &kp MINUS  &kp EQUAL  &kp PLUS   &kp DOT                                                                    &kp PIPE   &kp COLON  &kp LPAR  &kp RPAR  &kp QMARK  &none
            &none             &none         &kp SLASH  &kp BSLH   &kp ASTRK  &kp COMMA  &none    &none    &none      &trans  &trans  &trans  &kp TILDE  &kp DLLR   &kp LBRC   &kp RBRC  &kp AT    &none
            &magic L_MAGIC 0  &none         &none      &none      &none                 &kp SQT  &kp DQT  &kp GRAVE  &trans  &trans  &trans             &none      &none      &none     &none     &none
            >;
        };

       layer_world {
            bindings = <
            &trans            &trans     &trans     &trans     &trans                                                                    &trans     &trans  &trans     &trans  &trans
            &trans            &trans     &trans     &trans     &trans  &trans                                                    &trans  &trans     &trans  &trans     &trans  &trans
            &trans            &trans     &trans     &kp RA(E)  &trans  &trans                                                    &trans  &kp RA(U)  &trans  &kp RA(O)  &trans  &trans
            &trans            &kp RA(A)  &kp RA(S)  &trans     &trans  &trans                                                    &trans  &trans     &trans  &trans     &trans  &trans
            &trans            &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans     &trans  &trans     &trans  &trans
            &magic L_MAGIC 0  &trans     &trans     &trans     &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans     &trans  &trans     &trans  &trans
            >;
        };

        // TODO: proper WASD block (look at sunaku)
        layer_gaming {
            bindings = <
            &kp F1            &kp F2      &kp F3  &kp F4  &kp F5                                                                                &trans  &trans  &trans  &trans  &trans
            &kp M             &kp GRAVE   &kp N1  &kp N2  &kp N3  &kp N4                                                                &trans  &trans  &trans  &trans  &trans  &trans
            &kp G             &kp TAB     &kp Q   &kp W   &kp E   &kp R                                                                 &trans  &trans  &trans  &trans  &trans  &trans
            &kp U             &kp CAPS    &kp A   &kp S   &kp D   &kp F                                                                 &trans  &trans  &trans  &trans  &trans  &trans
            &kp I             &kp LSHIFT  &kp Z   &kp X   &kp C   &kp V   &kp LBKT   &kp RBKT  &kp FSLH  &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            &magic L_MAGIC 0  &kp LCTRL   &kp J   &kp K   &kp L           &kp ENTER  &kp LALT  &kp BSLH  &to L_DEFAULT  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_magic {
            bindings = <
            &bt BT_CLR  &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
            &none       &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
            &none       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
            &bootloader &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
            &sys_reset  &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
            &none       &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
