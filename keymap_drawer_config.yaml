draw_config:
  append_colon_to_layer_header: false
  dark_mode: false
  draw_key_sides: true
  key_side_pars:
    rel_x: 0
    rel_y: 2
    rel_w: 6
    rel_h: 6
    rx: 4
    ry: 4
  key_rx: 6
  key_ry: 6
  n_columns: 1
  mark_alternate_layer_activators: true
  shrink_wide_legends: 6
  glyph_tap_size: 18
  glyph_hold_size: 15
  glyph_shifted_size: 15
  svg_extra_style: |
    /* For default sytles, see https://github.com/caksoylar/keymap-drawer/blob/main/keymap_drawer/config.py#L85 */

    :root {
      --default-color: #f6f8fa;

      --font-muted-opacity: 0.7;

      --tap-font-size: 18px;
      --tap-font-size-sm: 14px;

      --saturation: 30%;
      --fill-lightness: 87%;
      --stroke-offset: 10%;
      --stroke-lightness: calc(var(--fill-lightness) - var(--stroke-offset));

      --layer-fill-lightness: 46%;
      --layer-stroke-lightness: calc(var(--layer-fill-lightness) - var(--stroke-offset));
      --layer-fill: hsl(0deg, 0%, var(--layer-fill-lightness));
      --layer-stroke: hsl(0deg, 0%, var(--layer-stroke-lightness));
      --layer-text-contrast: #fff;

      --magic-hue: 270deg;
      --magic-fill: hsl(var(--magic-hue), var(--saturation), var(--fill-lightness));
      --magic-stroke: hsl(var(--magic-hue), var(--saturation), var(--stroke-lightness));

      --mod-hue: 0deg;
      --mod-fill: hsl(var(--mod-hue), var(--saturation), var(--fill-lightness));
      --mod-stroke: hsl(var(--mod-hue), var(--saturation), var(--stroke-lightness));

      --alt-gaming-fill-lightness: 84%;
      --alt-gaming-stroke-lightness: calc(var(--alt-gaming-fill-lightness) - var(--stroke-offset));
      --alt-gaming-fill: hsl(0deg, 0%, var(--alt-gaming-fill-lightness));
      --alt-gaming-stroke: hsl(0deg, 0%, var(--alt-gaming-stroke-lightness));

      --func-hue: 124deg;
      --func-fill: hsl(var(--func-hue), var(--saturation), var(--fill-lightness));
      --func-stroke: hsl(var(--func-hue), var(--saturation), var(--stroke-lightness));

      --other-hue: 200deg;
      --other-fill: hsl(var(--other-hue), var(--saturation), var(--fill-lightness));
      --other-stroke: hsl(var(--other-hue), var(--saturation), var(--stroke-lightness));

      --app-hue: 300deg;
      --app-fill-lightness: 93%;
      --app-stroke-lightness: calc(var(--app-fill-lightness) - var(--stroke-offset));
      --app-saturation: 24%;
      --app-fill: hsl(var(--app-hue), var(--app-saturation), var(--app-fill-lightness));
      --app-stroke: hsl(var(--app-hue), var(--app-saturation), var(--app-stroke-lightness));

      --symbol-hue: 59deg;
      --symbol-saturation: 80%;
      --symbol-fill: hsl(var(--symbol-hue), var(--symbol-saturation), var(--fill-lightness));
      --symbol-stroke: hsl(var(--symbol-hue), var(--symbol-saturation), var(--stroke-lightness));
    }

    svg.keymap {
      font-family: Ubuntu Mono, Inconsolata, Consolas, Liberation Mono, Menlo, monospace;
      font-size: var(--tap-font-size);
      font-weight: regular;
      text-rendering: optimizeLegibility;
      translate: 0 -1px;
    }

    text.hold {
      font-size: var(--tap-font-size-sm) !important;
      font-weight: bold;
      opacity: var(--font-muted-opacity);
      translate: 0 -8px;
    }
    text.combo {
      font-size: var(--tap-font-size-sm) !important;
      font-weight: bold;
      opacity: var(--font-muted-opacity);
    }
    text.hold tspan {
      font-size: 100% !important;
    }
    rect.held, rect.combo.held {
      fill: var(--default-color);
    }
    .trans.tap {
      opacity: 0.7;
    }

    /* Custom types */

    .fs-sm {
      font-size: var(--tap-font-size-sm);
    }

    .homerow_mod text.hold {
      text-shadow: 0 0 10px hsl(0deg 100% 50% / 70%), 0 0 8px hsl(0deg 100% 50% / 70%);
      fill: black;
      font-weight: normal;
    }

    .mod rect.key {
      fill: var(--mod-fill);
      stroke: var(--mod-stroke);
    }
    .mod.shifted {
      translate: 0 33px;
    }

    .magic rect.key {
      fill: var(--magic-fill);
      stroke: var(--magic-stroke);
    }
    .magic.tap {
      font-size: var(--tap-font-size-sm);
    }
    .magic.hold {
      text-decoration: underline;
    }

    .layer {
      fill: var(--layer-text-contrast);
      text-shadow: 0 0 3px rgba(0 0 0 / 38%);
    }
    .layer rect.key {
      fill: var(--layer-fill);
      stroke: var(--layer-stroke);
    }
    .layer.tap {
      font-size: var(--tap-font-size-sm);
    }
    .layer.hold {
      text-decoration: underline;
    }

    .func rect.key {
      fill: var(--func-fill);
      stroke: var(--func-stroke);
    }

    .other rect.key {
      fill: var(--other-fill);
      stroke: var(--other-stroke);
    }

    .app rect.key {
      fill: var(--app-fill);
      stroke: var(--app-stroke);
    }

    .symbol rect.key {
      fill: var(--symbol-fill);
      stroke: var(--symbol-stroke);
    }

    .sub.tap {
      translate: -5px 2px;
    }
    .sub.shifted {
      translate: 10px 13px;
      font-size: var(--tap-font-size-sm);
    }

    .rgb.tap {
      translate: 0 -10px;
    }
    .rgb.shifted {
      translate: 18px 4px;
      font-size: var(--tap-font-size);
    }

parse_config:
  raw_binding_map:
    # Function keys
    "&kp F1":
      tap: F1
      type: func
    "&kp F2":
      tap: F2
      type: func
    "&kp F3":
      tap: F3
      type: func
    "&kp F4":
      tap: F4
      type: func
    "&kp F5":
      tap: F5
      type: func
    "&kp F6":
      tap: F6
      type: func
    "&kp F7":
      tap: F7
      type: func
    "&kp F8":
      tap: F8
      type: func
    "&kp F9":
      tap: F9
      type: func
    "&f10_gaming":
      tap: F10
      hold: Gaming
      type: func
    "&kp F11":
      tap: F11
      type: func
    "&kp F12":
      tap: F12
      type: func

    # Symbols
    "&kp EQUAL":
      tap: "="
      type: symbol
    '&degree_sign':
      tap: "°"
      type: symbol

    '&kp RA(A)': Ä
    '&kp RA(S)': ẞ
    '&kp RA(E)': €
    '&kp RA(U)': Ü
    '&kp RA(O)': Ö

    # Misc
    "&magic L_MAGIC 0":
      tap: Status
      hold: Magic
      type: magic
    "&caps_word":
      tap:  CAPS WORD
      type: other
    "&to L_DEFAULT":
      tap: Base
      hold: toggle
      type: layer

    # Thumb
    "&mo_kp L_SYMBOLS TAB":
      tap: $$mdi:keyboard-tab$$
      hold: Symbols
      type: layer
    "&mo L_LOWER":
      tap: Lower
      type: layer
    "&mo L_WORLD":
      tap: World
      type: layer
    "&mo_kp L_SYMBOLS ESC":
      tap: Esc
      hold: symbols
      type: layer

    # Homerow mods
    "&hmlp LGUI A":
      tap: A
      hold: Super
      type: homerow_mod
    "&hmlr LALT S":
      tap: S
      hold: Alt
      type: homerow_mod
    "&hmlm LCTRL D":
      tap: D
      hold: Ctrl
      type: homerow_mod
    "&hmli LSHIFT F":
      tap: F
      hold: Shift
      type: homerow_mod
    "&hmri LSHIFT J":
      tap: J
      hold: Shift
      type: homerow_mod
    "&hmrm LCTRL K":
      tap: K
      hold: Ctrl
      type: homerow_mod
    "&hmrr LALT L":
      tap: L
      hold: Alt
      type: homerow_mod
    "&hmrp LGUI SEMI":
      tap: ;
      hold: Super
      type: homerow_mod symbol

    # Numblock
    '&kp KP_EQUAL':
      tap: "="
      type: symbol
    '&kp KP_DIVIDE':
      tap: /
      type: symbol
    '&kp PAUSE_BREAK':
      tap: Break
      type: other fs-sm
    '&kp KP_MULTIPLY':
      tap: "*"
      type: symbol
    '&kp KP_PLUS':
      tap: +
      type: symbol
    '&kp KP_MINUS':
      tap: "-"
      type: symbol
    '&kp KP_DOT':
      tap: .
      type: symbol
    '&kp KP_ENTER':
      tap: $$mdi:keyboard-return$$
      type: other
    '&kp PSCRN':
      tap: Print Screen
      type: other fs-sm
    '&kp SLCK':
      tap: Scroll Lock
      type: other fs-sm
    '&kp KP_N0': "0"
    '&kp KP_N1': "1"
    '&kp KP_N2': "2"
    '&kp KP_N3': "3"
    '&kp KP_N4': "4"
    '&kp KP_N5': "5"
    '&kp KP_N6': "6"
    '&kp KP_N7': "7"
    '&kp KP_N8': "8"
    '&kp KP_N9': "9"

    # Special functions
    '&kp LC(X)':
      tap: $$mdi:content-cut$$
      type: app
    '&kp LC(C)':
      tap: $$mdi:content-copy$$
      type: app
    '&kp LC(V)':
      tap: $$mdi:content-paste$$
      type: app
    '&kp LC(Z)':
      tap: $$mdi:undo$$
      type: app
    '&kp LC(Y)':
      tap: $$mdi:redo$$
      type: app

    # Magic
    "&bootloader": BOOT
    "&sys_reset": RESET
    "&rgb_ug RGB_SPI":
      tap: RGB Speed
      shifted: "+"
      type: rgb
    "&rgb_ug RGB_SPD":
      tap: RGB Speed
      shifted: "-"
      type: rgb
    "&rgb_ug RGB_SAI":
      tap: RGB Sat
      shifted: "+"
      type: rgb
    "&rgb_ug RGB_SAD":
      tap: RGB Sat
      shifted: "-"
      type: rgb
    "&rgb_ug RGB_HUI":
      tap: RGB Hue
      shifted: "+"
      type: rgb
    "&rgb_ug RGB_HUD":
      tap: RGB Hue
      shifted: "-"
      type: rgb
    "&rgb_ug RGB_BRI":
      tap: RGB Bri
      shifted: "+"
      type: rgb
    "&rgb_ug RGB_BRD":
      tap: RGB Bri
      shifted: "-"
      type: rgb
    "&rgb_ug RGB_TOG": RGB Toggle
    "&rgb_ug RGB_EFF": RGB Effect
    "&bt BT_CLR":
      tap: $$mdi:bluetooth-settings$$
      shifted: $$mdi:close-thick$$
      type: sub
    "&bt BT_CLR_ALL":
      tap: $$mdi:bluetooth-settings$$
      shifted: $$mdi:close-thick$$
      hold: $$mdi:asterisk$$
      type: sub
    '&bt_0':
      tap: $$mdi:bluetooth-connect$$
      shifted: '0'
      type: sub
    '&bt_1':
      tap: $$mdi:bluetooth-connect$$
      shifted: '1'
      type: sub
    '&bt_2':
      tap: $$mdi:bluetooth-connect$$
      shifted: '2'
      type: sub
    '&bt_3':
      tap: $$mdi:bluetooth-connect$$
      shifted: '3'
      type: sub
    '&out OUT_USB': $$mdi:usb$$

  zmk_keycode_map:
    # default values
    EXCLAMATION:
      tap: "!"
      type: symbol
    EXCL:
      tap: "!"
      type: symbol
    AT_SIGN:
      tap: "@"
      type: symbol
    AT:
      tap: "@"
      type: symbol
    HASH:
      tap: "#"
      type: symbol
    POUND:
      tap: "#"
      type: symbol
    DOLLAR:
      tap: $
      type: symbol
    DLLR:
      tap: $
      type: symbol
    PERCENT:
      tap: "%"
      type: symbol
    PRCNT:
      tap: "%"
      type: symbol
    CARET:
      tap: ^
      type: symbol
    AMPERSAND:
      tap: "&"
      type: symbol
    AMPS:
      tap: "&"
      type: symbol
    ASTERISK:
      tap: "*"
      type: symbol
    ASTRK:
      tap: "*"
      type: symbol
    STAR:
      tap: "*"
      type: symbol
    LEFT_PARENTHESIS:
      tap: (
      type: symbol
    LPAR:
      tap: (
      type: symbol
    RIGHT_PARENTHESIS:
      tap: )
      type: symbol
    RPAR:
      tap: )
      type: symbol
    EQUAL:
      tap: "="
      type: symbol
    PLUS:
      tap: +
      type: symbol
    MINUS:
      tap: "-"
      type: symbol
    UNDERSCORE:
      tap: _
      type: symbol
    UNDER:
      tap: _
      type: symbol
    SLASH:
      tap: /
      type: symbol
    FSLH:
      tap: /
      type: symbol
    QUESTION:
      tap: "?"
      type: symbol
    QMARK:
      tap: "?"
      type: symbol
    BACKSLASH:
      tap: '\'
      type: symbol
    BSLH:
      tap: '\'
      type: symbol
    PIPE:
      tap: "|"
      type: symbol
    NON_US_BACKSLASH:
      tap: '\'
      type: symbol
    PIPE2: "|"
    NON_US_BSLH:
      tap: "|"
      type: symbol
    SEMI:
      tap: ;
      type: symbol
    COLON:
      tap: ":"
      type: symbol
    SINGLE_QUOTE:
      tap: "'"
      type: symbol
    SQT:
      tap: "'"
      type: symbol
    APOSTROPHE:
      tap: "'"
      type: symbol
    APOS:
      tap: "'"
      type: symbol
    DOUBLE_QUOTES:
      tap: '"'
      type: symbol
    DQT:
      tap: '"'
      type: symbol
    COMMA:
      tap: ","
      type: symbol
    LESS_THAN:
      tap: <
      type: symbol
    LT:
      tap: <
      type: symbol
    PERIOD:
      tap: .
      type: symbol
    DOT:
      tap: .
      type: symbol
    GREATER_THAN:
      tap: ">"
      type: symbol
    GT:
      tap: ">"
      type: symbol
    LBKT:
      tap: "["
      type: symbol
    RBKT:
      tap: "]"
      type: symbol
    LBRC:
      tap: "{"
      type: symbol
    RBRC:
      tap: "}"
      type: symbol
    GRAVE:
      tap: "`"
      type: symbol
    TILDE:
      tap: "~"
      type: symbol
    NON_US_HASH:
      tap: "#"
      type: symbol
    NUHS:
      tap: "#"
      type: symbol
    TILDE2: "~"

    # custom values
    HOME:
      tap: Home
      type: other
    INS:
      tap: Ins
      type: other
    CAPS:
      tap: CAPS
      type: other
    END:
      tap: End
      type: other
    ESC:
      tap: Esc
      type: other
    SPACE:
      tap: $$mdi:keyboard-space$$
      type: other
    BSPC:
      tap: $$mdi:backspace$$
      type: other
    DEL:
      tap: $$mdi:backspace-reverse$$
      type: other
    RET:
      tap: $$mdi:keyboard-return$$
      type: other

    C_MUTE:
      tap: $$mdi:volume-mute$$
      type: app
    C_VOL_UP:
      tap: $$mdi:volume-plus$$
      type: app
    C_VOL_DN:
      tap: $$mdi:volume-minus$$
      type: app

    TAB:
      tap: $$mdi:keyboard-tab$$
      type: other
    UP:
      tap: $$mdi:arrow-up-bold$$
      type: other
    DOWN:
      tap: $$mdi:arrow-down-bold$$
      type: other
    LEFT:
      tap: $$mdi:arrow-left-bold$$
      type: other
    RIGHT:
      tap: $$mdi:arrow-right-bold$$
      type: other
    PG_UP:
      tap: $$mdi:transfer-up$$
      type: other
    PG_DN:
      tap: $$mdi:transfer-down$$
      type: other

    LCTRL:
      tap: Ctrl
      type: mod
    RCTRL:
      tap: Ctrl
      type: mod
    LALT:
      tap: Alt
      type: mod
    RALT:
      tap: Alt
      type: mod
    LSHIFT:
      tap: Shift
      type: mod
    RSHIFT:
      tap: Shift
      type: mod
    LGUI:
      tap: Super
      type: mod
    RGUI:
      tap: Super
      type: mod

    KP_NUM:
      tap: Num Lock
      type: other

  zmk_combos:
    combo_boot:
      align: right
      o: 0.25
      arc_scale: 1
